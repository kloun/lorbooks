<HTML
><HEAD
><TITLE
>Загрузочные диски и процесс загрузки.</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.76b+
"><LINK
REL="HOME"
TITLE="The Linux Bootdisk HOWTO"
HREF="t1.htm"><LINK
REL="PREVIOUS"
TITLE="Введение."
HREF="x71.htm"><LINK
REL="NEXT"
TITLE="Создание корневой файловой системы."
HREF="x193.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>The Linux Bootdisk HOWTO</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="x71.htm"
ACCESSKEY="P"
>&#1055;&#1088;&#1077;&#1076;.</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="x193.htm"
ACCESSKEY="N"
>&#1057;&#1083;&#1077;&#1076;.</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="AEN91">Загрузочные диски и процесс загрузки.</H1
><P
>Загрузочный диск - по существу миниатюрная, самодостаточная Linux система на 
дискете. Она должна выполнять многие из функций, которые выполняет 
укомплектована полноразмерная Linux система. Перед попыткой ее создания, Вы 
должны понять основы процесса загрузки Linux. Мы представляем здесь 
основы, которые являются достаточными для понимания остальной части этого 
документа. Многие подробности и альтернативные опции были опущены.</P
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="AEN96">Процесс начальной загрузки.</H2
><P
> 
Все PC системы начинают процесс загрузки с выполнения кода в ROM 
(обозначаемого <SPAN
CLASS="emphasis"
><I
CLASS="EMPHASIS"
>BIOS</I
></SPAN
>) загружая сектор 0, цилиндра 0 
загрузочного устройства. Загрузочное устройство - обычно дисковод 
(обозначается <TT
CLASS="FILENAME"
>A:</TT
> в DOS и <TT
CLASS="FILENAME"
>/dev/fd0</TT
> в 
Linux).  Затем BIOS пробует выполнить этот сектор. На большинстве загрузочных 
дисков, сектор 0, цилиндра 0 содержит либо:

<P
></P
><UL
><LI
><P
>код загрузчика, такого как LILO, который находит, загружает и выполняет ядро,
начиная загрузку соответствующим образом; либо</P
></LI
><LI
><P
>начало ядра операционной системы, такой как Linux.&#13;</P
></LI
></UL
>&#13;</P
><P
>Если Linux ядро прямо скопировано на дискету, первый сектор диска - 
является первым сектором ядра Linux. Этот первый сектор продолжит процесс 
загрузки, загружая остальную часть ядра с загрузочного устройства.</P
><P
>Как только ядро полностью загружено, оно производит инициализацию драйверов 
устройств и их структур данных. Как только оно полностью инициализировалось, 
оно просматривает в своем образе специальную ячейку, называемую 
<SPAN
CLASS="emphasis"
><I
CLASS="EMPHASIS"
>ramdisk слово</I
></SPAN
>. Это слово определяет, где ядро будет 
искать <SPAN
CLASS="emphasis"
><I
CLASS="EMPHASIS"
>корневую файловую систему</I
></SPAN
>. Корневая файловая 
система - обычная файловая система, которая будет монтироваться как 
``<TT
CLASS="FILENAME"
>/</TT
>''. Ядру нужно сообщить, где искать корневую файловую 
систему; если оно не может найти загрузочный образ, оно останавливается.</P
><P
>В некоторых ситуациях &dash; часто при загрузке с дискеты &dash; 
корневая файловая система загружается в <SPAN
CLASS="emphasis"
><I
CLASS="EMPHASIS"
>ramdisk</I
></SPAN
> -
оперативную память (RAM), с которой система работает как с диском. 
RAM на несколько порядков быстрее дискеты, так что операции
системы с ramdisk выполняются быстро. Ядро также может загрузить 
<SPAN
CLASS="emphasis"
><I
CLASS="EMPHASIS"
>сжатую файловую систему</I
></SPAN
> с дискеты и распаковать ее на 
ramdisk, что позволяет поместить на дискете намного больше файлов.</P
><P
>Как только корневая файловая система загружена и примонтирована, Вы видите 
сообщение:
<PRE
CLASS="SCREEN"
>        VFS: Mounted root (ext2 filesystem) readonly.</PRE
></P
><P
>Как только система успешно загрузила корневую файловую систему, она 
пытается выполнить программу <TT
CLASS="FILENAME"
>init</TT
> (в 
<TT
CLASS="FILENAME"
>/bin</TT
> или <TT
CLASS="FILENAME"
>/sbin</TT
>).  
<TT
CLASS="FILENAME"
>init</TT
> читает конфигурационный файл
<TT
CLASS="FILENAME"
>/etc/inittab</TT
>, ищет строку, обозначенную 
<TT
CLASS="LITERAL"
>sysinit</TT
>, и исполняет обозначенный скрипт.  Скрипт
<TT
CLASS="LITERAL"
>sysinit</TT
>  - обычно что-то вроде
<TT
CLASS="FILENAME"
>/etc/rc</TT
> или <TT
CLASS="FILENAME"
>/etc/init.d/boot</TT
>.  Этот 
скрипт - набор команд оболочки, которые запускают основные системные службы,
такие как запуск на жестких дисках <B
CLASS="COMMAND"
>fsck</B
>, загрузка 
необходимых модулей ядра, инициализация подкачки (swapping), инициализация 
сети, и монтирование упомянутых в <TT
CLASS="FILENAME"
>/etc/fstab</TT
> дисков.</P
><P
>Этот скрипт часто вызывает различные другие скрипты, для модульной 
инициализации. Например, в общей структуре SysVinit, каталог 
<TT
CLASS="FILENAME"
>/etc/rc.d/</TT
> содержит комплексную структуру подкаталогов, 
чьи файлы определяют, как запускать и завершать большинство служб системы. 
Однако, на загрузочных дисках сценарий sysinit часто очень прост.</P
><P
>Когда сценарий sysinit заканчивается,  управление возвращается к
<B
CLASS="COMMAND"
>init</B
>, который затем входит в <SPAN
CLASS="emphasis"
><I
CLASS="EMPHASIS"
>уровень запуска по 
умолчанию (default runlevel)</I
></SPAN
>, определенный в
<TT
CLASS="FILENAME"
>inittab</TT
> ключевым словом <TT
CLASS="LITERAL"
>initdefault</TT
>. 
Строка runlevel обычно определяет программу подобную <B
CLASS="COMMAND"
>getty</B
>, 
которая отвечает за связь между консолью и tty. Это - программа 
<B
CLASS="COMMAND"
>getty</B
>, которая печатает знакомое приглашение 
``<TT
CLASS="PROMPT"
>login:</TT
>''. Программа <B
CLASS="COMMAND"
>getty</B
>, для проверки 
сеанса вхождения в систему и установления пользовательских сессий, вызывает 
программу <B
CLASS="COMMAND"
>login</B
>, </P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="AEN162">Типы дисков.</H2
><P
>Сделав базовый обзор процесса начальной загрузки, теперь мы можем определить
различные типы предполагаемых дисков. Мы классифицируем диски по четырем типам.
Здесь и далее в этом документе, если не оговорено иначе, термин ``диск'' 
используется как дискета, хотя большинство обсуждаемого материала может применяться и для жестких дисков.</P
><P
><P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
>Загрузочный (boot)</DT
><DD
><P
>Диск содержит способное загружаться ядро. Диск может использоваться для 
загрузки ядра, которое далее может загрузить корневую файловую систему на 
другом диске. Ядру на загрузочном диске обычно нужно указать, где искать
корневую файловую систему.</P
><P
>Часто загрузочный диск загружает корневую файловую систему с другой дискеты, 
но можно указать, чтобы загрузочный диск загружал корневую файловую систему с
жесткого диска. Обычно это делается при испытании нового ядра. (Фактически,
``<B
CLASS="COMMAND"
>make zdisk</B
>'' автоматически создаст такой диск из 
исходного кода ядра).</P
></DD
><DT
>Корневой (root)</DT
><DD
><P
>Диск с файловой системой, содержащей необходимые файлы для выполнения Linux 
системы. Такой диск не обязательно содержит ядро или загрузчик.&#13;</P
><P
>Корневой диск может использоваться для выполнения системы независимо от любых 
других дисков, после загрузки ядра. Обычно корневой диск автоматически 
копируется в ramdisk. Это делает корневой диск намного быстрее, и освобождает 
дисковод для сервисного диска.</P
></DD
><DT
>Загрузочный / Корневой (boot/root)</DT
><DD
><P
>Диск, содержащий и ядро, и корневую файловую систему. Другими словами, 
на нем есть все необходимое для загрузки и выполнения Linux системы без 
жесткого диска. Преимущество этого типа диска в компактности &dash; все 
необходимое находится на одном диске. Однако постепенно увеличивающийся 
размер всего приводит к тому, что все труднее поместить все на одну дискету, 
даже со сжатием.</P
></DD
><DT
>Сервисный (utility)</DT
><DD
><P
>Диск, содержащий файловую систему, которая не предназначена, для монтирования 
корневой файловой системой. Это - дополнительный диск данных. Если у Вас 
слишком много помещено на корневом диске, Вы могли бы использовать диск 
этого типа, для хранения дополнительных утилит.&#13;</P
></DD
></DL
></DIV
></P
><P
>Вообще, когда мы говорим ``создание загрузочного диска'' мы подразумеваем 
создание обоих загрузочного (ядро) и корневого (файлы) частей. Они могут быть 
либо одним (одиночным загрузочным/корневым) диском, либо отдельными (загрузочным
+ корневым) дисками. Наиболее гибкий подход для спасательных дискет в 
использовании раздельных корневой и загрузочной дискет, а также одной или 
более сервисных дискет, для урегулирования превышения.</P
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="x71.htm"
ACCESSKEY="P"
>&#1055;&#1088;&#1077;&#1076;.</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="t1.htm"
ACCESSKEY="H"
>&#1053;&#1072;&#1095;&#1072;&#1083;&#1086;</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="x193.htm"
ACCESSKEY="N"
>&#1057;&#1083;&#1077;&#1076;.</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Введение.</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
>&nbsp;</TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Создание корневой файловой системы.</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>